"use client"

import type React from "react"
import { useState, useRef, useEffect } from "react"
import { Send, RefreshCw, Cpu, Sparkles, Copy, Share, Bookmark, Cloud, Server, Shield } from "lucide-react"
import { marked } from "marked" // Import the marked library
import Image from "next/image"
interface Message {
  role: "user" | "assistant"
  content: string
}

export default function HawiyatSupportChat() {
  const [messages, setMessages] = useState<Message[]>([
    {
      role: "assistant",
      content:
        "Welcome to Hawiyat Support! I'm your AI assistant for DevOps, Cloud, Security, and automation queries. How can I help you today?",
    },
  ])
  const [input, setInput] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [conversation, setConversation] = useState<string[]>([])
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const [mounted, setMounted] = useState(false)
  // State to toggle raw Markdown display for debugging
  const [showRawMarkdown, setShowRawMarkdown] = useState(false)

  useEffect(() => {
    setMounted(true)
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }, [messages])

  // Configure marked to support GitHub Flavored Markdown (GFM)
  useEffect(() => {
    marked.setOptions({
      gfm: true, // Enable GitHub Flavored Markdown
      breaks: true, // Enable GFM line breaks
    })
  }, [])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!input.trim() || isLoading) return

    const userMessage: Message = { role: "user", content: input }
    setMessages((prev) => [...prev, userMessage])
    setInput("")
    setIsLoading(true)

    try {
      const response = await fetch("/api/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          message: input,
          conversation: conversation,
        }),
      })

      if (!response.ok) {
        throw new Error(`Error: ${response.status}`)
      }

      const data = await response.json()
      const assistantMessage: Message = {
        role: "assistant",
        content: data.text || data.content || "I apologize, but I couldn't process your request. Please try again.",
      }

      // --- DEBUGGING LOGS ---
      console.log("Raw Markdown from AI:", assistantMessage.content)
      const parsedHtml = marked.parse(assistantMessage.content)
      console.log("HTML generated by Marked:", parsedHtml)
      // --- END DEBUGGING LOGS ---

      setMessages((prev) => [...prev, assistantMessage])
      setConversation(data.conversation || [...conversation, input, data.text || data.content])
    } catch (error) {
      console.error("Error:", error)
      setMessages((prev) => [
        ...prev,
        {
          role: "assistant",
          content:
            "I apologize, but I'm experiencing technical difficulties. Please try again or contact our support team directly.",
        },
      ])
    } finally {
      setIsLoading(false)
    }
  }

  const copyMessage = (content: string) => {
    navigator.clipboard.writeText(content)
  }

  const shareMessage = (content: string) => {
    if (navigator.share) {
      navigator.share({
        title: "Hawiyat Support",
        text: content,
      })
    }
  }

  const handleQuickAction = (actionText: string) => {
    setInput(actionText)
  }

  if (!mounted) {
    return (
      <div className="min-h-screen bg-black flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-cyan-400"></div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-black flex flex-col relative">
      {/* Futuristic Background Elements */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        {/* Animated Grid Background */}
        <div className="absolute inset-0 opacity-20">
          <div className="absolute inset-0 bg-gradient-to-br from-cyan-500/10 via-transparent to-teal-500/10" />
          <div
            className="absolute inset-0 grid-pattern"
            style={{
              backgroundImage: `
                linear-gradient(rgba(6,182,212,0.3) 1px, transparent 1px),
                linear-gradient(90deg, rgba(6,182,212,0.3) 1px, transparent 1px)
              `,
              backgroundSize: "50px 50px",
              animation: "grid-shift 20s linear infinite",
            }}
          />
        </div>
        {/* Floating Particles */}
        <div className="floating-particles">
          {[...Array(8)].map((_, i) => (
            <div
              key={i}
              className="absolute w-2 h-2 bg-cyan-400 rounded-full opacity-60 particle"
              style={{
                left: `${10 + i * 12}%`,
                top: `${20 + i * 8}%`,
                animation: `float-${i % 3} ${4 + i * 0.3}s ease-in-out infinite ${i * 0.4}s`,
              }}
            />
          ))}
        </div>
        {/* Glowing Orbs */}
        <div className="absolute top-20 right-20 w-32 h-32 bg-cyan-500/20 rounded-full blur-xl animate-pulse-slow" />
        <div
          className="absolute bottom-32 left-16 w-24 h-24 bg-teal-500/20 rounded-full blur-xl animate-pulse-slow"
          style={{ animationDelay: "2s" }}
        />
        <div
          className="absolute top-1/2 left-1/4 w-20 h-20 bg-blue-500/15 rounded-full blur-xl animate-pulse-slow"
          style={{ animationDelay: "4s" }}
        />
        {/* Neural Network Lines */}
        <svg className="absolute inset-0 w-full h-full opacity-10" xmlns="http://www.w3.org/2000/svg">
          <defs>
            <linearGradient id="lineGradient" x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" stopColor="#06b6d4" stopOpacity="0.8" />
              <stop offset="100%" stopColor="#14b8a6" stopOpacity="0.2" />
            </linearGradient>
          </defs>
          <line
            x1="10%"
            y1="20%"
            x2="30%"
            y2="40%"
            stroke="url(#lineGradient)"
            strokeWidth="1"
            className="animate-draw"
          />
          <line
            x1="30%"
            y1="40%"
            x2="60%"
            y2="30%"
            stroke="url(#lineGradient)"
            strokeWidth="1"
            className="animate-draw"
            style={{ animationDelay: "1s" }}
          />
          <line
            x1="60%"
            y1="30%"
            x2="80%"
            y2="60%"
            stroke="url(#lineGradient)"
            strokeWidth="1"
            className="animate-draw"
            style={{ animationDelay: "2s" }}
          />
          <line
            x1="20%"
            y1="70%"
            x2="50%"
            y2="80%"
            stroke="url(#lineGradient)"
            strokeWidth="1"
            className="animate-draw"
            style={{ animationDelay: "3s" }}
          />
        </svg>
        {/* Data Stream Effect */}
        <div className="absolute right-10 top-0 h-full w-px bg-gradient-to-b from-transparent via-cyan-400/30 to-transparent">
          <div className="data-stream"></div>
        </div>
      </div>
      {/* Messages Area */}
      <div className="relative z-10 flex-1 overflow-y-auto px-6 py-6 custom-scrollbar mt-14 lg:mt-16">
        <div className="max-w-4xl mx-auto space-y-6">
          {messages.map((message, index) => (
            <div
              key={index}
              className={`flex ${message.role === "user" ? "justify-end" : "justify-start"} message-fade-in`}
              style={{ animationDelay: `${index * 0.1}s` }}
            >
              <div
                className={`flex items-start gap-4 max-w-[85%] ${message.role === "user" ? "flex-row-reverse" : ""}`}
              >
                {/* Avatar */}
                <div
                  className={`w-10 h-10 rounded-xl flex items-center justify-center flex-shrink-0 shadow-lg ${
                    message.role === "user"
                      ? "bg-transparent"
                      : "bg-transparent"
                  }`}
                >
                  {message.role === "user" ? (
                    <div className="w-5 h-5 rounded-full bg-white/30 border border-white/40" />
                  ) : (
                    <Image alt="Hawiyat Bot" height={50} width={50} src={"/hawiyat-logo.svg"} />
                  )}
                </div>
                {/* Message Content */}
                <div className="flex-1">
                  <div
                    className={`p-4 rounded-2xl backdrop-blur-sm border shadow-lg relative overflow-hidden ${
                      message.role === "user"
                        ? "bg-gradient-to-br from-blue-600/90 to-blue-700/90 border-blue-500/30 text-white shadow-blue-500/20"
                        : "bg-gray-900/90 border-gray-700/50 text-gray-100 shadow-gray-900/20"
                    }`}
                  >
                    {/* Message glow effect */}
                    <div
                      className={`absolute inset-0 opacity-20 ${
                        message.role === "user"
                          ? "bg-gradient-to-r from-blue-400 to-blue-600"
                          : "bg-gradient-to-r from-cyan-400 to-teal-500"
                      } blur-xl`}
                    ></div>
                    <div className="relative z-10 markdown-output">
                      {message.role === "assistant" ? (
                        <>
                          {/* Temporarily display raw Markdown for debugging */}
                          {showRawMarkdown && (
                            <pre className="bg-gray-800 text-gray-300 p-2 rounded-md text-xs mb-4 overflow-x-auto">
                              {message.content}
                            </pre>
                          )}
                          <div dangerouslySetInnerHTML={{ __html: marked.parse(message.content) }} />
                        </>
                      ) : (
                        <p className="text-sm leading-relaxed whitespace-pre-wrap break-words">{message.content}</p>
                      )}
                    </div>
                  </div>
                  {/* Message Actions for Assistant */}
                  {message.role === "assistant" && (
                    <div className="flex items-center gap-1 mt-3 ml-2">
                      <button
                        onClick={() => copyMessage(message.content)}
                        className="p-2 text-gray-500 hover:text-cyan-400 hover:bg-cyan-400/10 rounded-lg transition-all duration-200 active:scale-95 hover:shadow-lg hover:shadow-cyan-400/10"
                        title="Copy message"
                      >
                        <Copy className="w-4 h-4" />
                      </button>
                      <button
                        onClick={() => shareMessage(message.content)}
                        className="p-2 text-gray-500 hover:text-cyan-400 hover:bg-cyan-400/10 rounded-lg transition-all duration-200 active:scale-95 hover:shadow-lg hover:shadow-cyan-400/10"
                        title="Share message"
                      >
                        <Share className="w-4 h-4" />
                      </button>
                      <button
                        className="p-2 text-gray-500 hover:text-cyan-400 hover:bg-cyan-400/10 rounded-lg transition-all duration-200 active:scale-95 hover:shadow-lg hover:shadow-cyan-400/10"
                        title="Save message"
                      >
                        <Bookmark className="w-4 h-4" />
                      </button>
                      {/* Debugging Toggle Button */}
                      <button
                        onClick={() => setShowRawMarkdown(!showRawMarkdown)}
                        className="p-2 text-gray-500 hover:text-yellow-400 hover:bg-yellow-400/10 rounded-lg transition-all duration-200 active:scale-95 hover:shadow-lg hover:shadow-yellow-400/10"
                        title={showRawMarkdown ? "Hide raw Markdown" : "Show raw Markdown"}
                      >
                        <Sparkles className="w-4 h-4" />
                      </button>
                    </div>
                  )}
                </div>
              </div>
            </div>
          ))}
          {isLoading && (
            <div className="flex justify-start loading-fade-in">
              <div className="flex items-start gap-4 max-w-[85%]">
                <div className="w-10 h-10 rounded-xl bg-transparent flex items-center justify-center ">
                  <Image alt="Hawiyat Bot" height={50} width={50} src={"/hawiyat-logo.svg"} />
                </div>
                <div className="p-4 rounded-2xl bg-gray-900/90 border border-gray-700/50 text-gray-100 backdrop-blur-sm shadow-lg relative overflow-hidden">
                  <div className="absolute inset-0 bg-gradient-to-r from-cyan-400/10 to-teal-500/10 blur-xl"></div>
                  <div className="relative z-10 flex items-center gap-3">
                    <div className="flex gap-1">
                      <div className="w-2 h-2 rounded-full bg-cyan-400 animate-bounce"></div>
                      <div
                        className="w-2 h-2 rounded-full bg-cyan-400 animate-bounce"
                        style={{ animationDelay: "0.2s" }}
                      ></div>
                      <div
                        className="w-2 h-2 rounded-full bg-cyan-400 animate-bounce"
                        style={{ animationDelay: "0.4s" }}
                      ></div>
                    </div>
                    <span className="text-sm text-gray-400">AI is processing your request...</span>
                  </div>
                </div>
              </div>
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>
      </div>
      {/* Quick Actions */}
      <div className="relative z-10 px-6 py-3 border-t border-gray-800/30">
        <div className="max-w-4xl mx-auto">
          <div className="flex gap-2 overflow-x-auto pb-2 scrollbar-hide">
            {[
              {
                icon: Cloud,
                text: "Cloud Infrastructure Setup",
                color: "from-blue-500 to-blue-600",
                shadow: "shadow-blue-500/20",
              },
              {
                icon: Server,
                text: "DevOps Pipeline Help",
                color: "from-purple-500 to-purple-600",
                shadow: "shadow-purple-500/20",
              },
              {
                icon: Shield,
                text: "Security Best Practices",
                color: "from-green-500 to-green-600",
                shadow: "shadow-green-500/20",
              },
              {
                icon: Sparkles,
                text: "Automation Scripts",
                color: "from-yellow-500 to-orange-500",
                shadow: "shadow-orange-500/20",
              },
            ].map((action, index) => (
              <button
                key={index}
                onClick={() => handleQuickAction(action.text)}
                className={`flex items-center gap-2 px-4 py-2.5 rounded-xl bg-gradient-to-r ${action.color} text-white text-sm font-medium whitespace-nowrap hover:scale-105 transition-all duration-200 ${action.shadow} shadow-lg hover:shadow-xl backdrop-blur-sm border border-white/10`}
              >
                {action.icon && <action.icon className="w-4 h-4" />}
                {action.text}
              </button>
            ))}
          </div>
        </div>
      </div>
      {/* Input Area */}
      <div className="relative z-10 border-t border-gray-800/60 bg-black/80 backdrop-blur-xl p-6">
        <div className="max-w-4xl mx-auto">
          <form onSubmit={handleSubmit} className="flex items-end gap-4">
            <div className="flex-1 relative">
              <div className="absolute inset-0 bg-gradient-to-r from-cyan-500/10 to-teal-500/10 rounded-2xl blur-xl"></div>
              <textarea
                value={input}
                onChange={(e) => setInput(e.target.value)}
                placeholder="Ask about DevOps, Cloud, Security, Automation, or any technical questions..."
                className="w-full resize-none bg-gray-900/60 border border-gray-700/60 rounded-2xl px-4 py-3 pr-4 text-sm text-gray-100 placeholder-gray-500 focus:outline-none focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/20 min-h-[52px] max-h-32 overflow-y-auto transition-all duration-200 backdrop-blur-sm relative z-10 shadow-lg"
                rows={1}
                onKeyDown={(e) => {
                  if (e.key === "Enter" && !e.shiftKey) {
                    e.preventDefault()
                    handleSubmit(e)
                  }
                }}
                onInput={(e) => {
                  const target = e.target as HTMLTextAreaElement
                  target.style.height = "auto"
                  target.style.height = Math.min(target.scrollHeight, 128) + "px"
                }}
              />
            </div>
            <button
              type="submit"
              disabled={isLoading || !input.trim()}
              className="h-12 w-12 bg-gradient-to-br from-cyan-400 to-teal-500 hover:from-cyan-300 hover:to-teal-400 disabled:from-gray-600 disabled:to-gray-700 disabled:cursor-not-allowed text-black rounded-2xl transition-all duration-200 active:scale-95 flex items-center justify-center shadow-lg shadow-cyan-500/25 hover:shadow-xl hover:shadow-cyan-400/30 relative overflow-hidden"
              aria-label="Send message"
            >
              <div className="absolute inset-0 bg-gradient-to-r from-white/20 to-transparent opacity-0 hover:opacity-100 transition-opacity duration-200"></div>
              <div className="relative z-10">
                {isLoading ? <RefreshCw className="w-5 h-5 animate-spin" /> : <Send className="w-5 h-5" />}
              </div>
            </button>
          </form>
        </div>
      </div>
      {/* Custom Styles */}
      <style jsx>{`
        /* Keyframe Animations */
        @keyframes float-0 {
          0%, 100% { transform: translateY(0px) translateX(0px) translateZ(0); }
          33% { transform: translateY(-8px) translateX(4px) translateZ(0); }
          66% { transform: translateY(4px) translateX(-6px) translateZ(0); }
        }
        @keyframes float-1 {
          0%, 100% { transform: translateY(0px) translateX(0px) translateZ(0); }
          25% { transform: translateY(-12px) translateX(-4px) translateZ(0); }
          75% { transform: translateY(8px) translateX(6px) translateZ(0); }
        }
        @keyframes float-2 {
          0%, 100% { transform: translateY(0px) translateX(0px) translateZ(0); }
          50% { transform: translateY(-6px) translateX(8px) translateZ(0); }
        }
        @keyframes grid-shift {
          0% { transform: translate(0, 0); }
          100% { transform: translate(50px, 50px); }
        }
        @keyframes animate-draw {
          0% { stroke-dasharray: 0 100; }
          100% { stroke-dasharray: 100 0; }
        }
        @keyframes data-stream {
          0% { transform: translateY(-100%); opacity: 0; }
          50% { opacity: 1; }
          100% { transform: translateY(100vh); opacity: 0; }
        }
        @keyframes animate-pulse-slow {
          0%, 100% { opacity: 0.4; }
          50% { opacity: 0.8; }
        }
        @keyframes message-fade-in {
          0% { opacity: 0; transform: translateY(20px) translateZ(0); }
          100% { opacity: 1; transform: translateY(0) translateZ(0); }
        }
        @keyframes loading-fade-in {
          0% { opacity: 0; transform: translateY(10px) translateZ(0); }
          100% { opacity: 1; transform: translateY(0) translateZ(0); }
        }
        /* Custom Classes */
        .floating-particles {
          position: absolute;
          inset: 0;
          pointer-events: none;
        }
        .particle {
          filter: drop-shadow(0 0 4px rgba(6, 182, 212, 0.6));
        }
        .animate-pulse-slow {
          animation: animate-pulse-slow 4s ease-in-out infinite;
        }
        .animate-draw {
          stroke-dasharray: 100;
          animation: animate-draw 3s ease-in-out infinite;
        }
        .data-stream {
          width: 2px;
          height: 20px;
          background: linear-gradient(to bottom, transparent, #06b6d4, transparent);
          animation: data-stream 3s linear infinite;
        }
        .message-fade-in {
          animation: message-fade-in 0.6s ease-out both;
        }
        .loading-fade-in {
          animation: loading-fade-in 0.4s ease-out;
        }
        /* Scrollbar Styling */
        .custom-scrollbar::-webkit-scrollbar {
          width: 6px;
        }
        .custom-scrollbar::-webkit-scrollbar-track {
          background: rgba(0, 0, 0, 0.2);
          border-radius: 3px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb {
          background: linear-gradient(to bottom, rgba(6, 182, 212, 0.4), rgba(20, 184, 166, 0.4));
          border-radius: 3px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
          background: linear-gradient(to bottom, rgba(6, 182, 212, 0.6), rgba(20, 184, 166, 0.6));
        }
        .scrollbar-hide {
          -ms-overflow-style: none;
          scrollbar-width: none;
        }
        .scrollbar-hide::-webkit-scrollbar {
          display: none;
        }
        /* Performance optimizations */
        * {
          transform: translateZ(0);
          backface-visibility: hidden;
        }
        /* Responsive adjustments */
        @media (max-width: 640px) {
          .floating-particles .particle {
            width: 1.5px;
            height: 1.5px;
          }
          .data-stream {
            width: 1px;
          }
        }

        /* General Markdown Output Styling */
        .markdown-output {
          color: #e0e0e0; /* Light gray text for readability */
          line-height: 1.6;
          font-size: 0.875rem; /* Equivalent to prose-sm */
        }

        .markdown-output p {
          margin-bottom: 1em;
        }

        .markdown-output h1,
        .markdown-output h2,
        .markdown-output h3,
        .markdown-output h4,
        .markdown-output h5,
        .markdown-output h6 {
          color: #2BFFFF; /* Cyan for headings */
          margin-top: 1.5em;
          margin-bottom: 0.5em;
          font-weight: bold;
        }

        .markdown-output h1 { font-size: 2em; }
        .markdown-output h2 { font-size: 1.5em; }
        .markdown-output h3 { font-size: 1.25em; }

        .markdown-output ul,
        .markdown-output ol {
          margin-left: 1.5em;
          margin-bottom: 1em;
        }

        .markdown-output li {
          margin-bottom: 0.5em;
        }

        .markdown-output a {
          color: #2BFFFF; /* Cyan for links */
          text-decoration: underline;
          transition: color 0.2s ease-in-out;
        }

        .markdown-output a:hover {
          color: #1CDDDD; /* Lighter cyan on hover */
        }

        .markdown-output strong {
          font-weight: bold;
          color: #2BFFFF; /* Bold text in cyan */
        }

        .markdown-output em {
          font-style: italic;
        }

        .markdown-output code {
          background-color: rgba(6, 182, 212, 0.1); /* Light cyan background for inline code */
          padding: 0.2em 0.4em;
          border-radius: 0.3em;
          font-family: monospace;
          color: #06b6d4; /* Cyan text for inline code */
        }

        .markdown-output pre {
          background-color: rgba(0, 0, 0, 0.5); /* Darker background for code blocks */
          border: 1px solid rgba(6, 182, 212, 0.3);
          border-radius: 0.5rem;
          padding: 1em;
          overflow-x: auto;
          margin-top: 1em;
          margin-bottom: 1em;
        }

        .markdown-output pre code {
          background-color: transparent;
          padding: 0;
          border-radius: 0;
          color: #e0e0e0; /* White text for code blocks */
        }
      `}</style>
    </div>
  )
}
